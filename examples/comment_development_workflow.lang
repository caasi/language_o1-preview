{-
   Development Workflow with Comments
   =================================
   
   This demonstrates how comments support common development workflows.
   
   WORKFLOW INTENTIONS:
   - Enable rapid prototyping with comment/uncomment
   - Support debugging by selectively disabling code
   - Allow version tracking of different implementations
   - Facilitate code review with inline explanations
-}

-- Example: Debugging by commenting out problematic code
let debug_value = 5 in
  -- Original calculation (commented out for debugging):
  -- debug_value * 2 + 1
  
  -- Simplified version for testing:
  debug_value  -- Expected: 5
end

{-
   Example: Multiple implementation approaches
   
   Sometimes we want to keep alternative implementations for reference:
   
   Approach 1 (simple):
   let x = 10 in x end
   
   Approach 2 (complex - disabled for now):
   let x = 5 in
     let y = x * 2 in
       y + 3
     end
   end
   
   We can easily switch between them by moving comment boundaries.
-}

-- Current active implementation:
let final_answer = 42 in
  final_answer
end

{-
   FUTURE FEATURES TO IMPLEMENT:
   =============================
   
   When we extend the language, we might want to add:
   
   1. Function definitions with comments:
      fun factorial n =
        -- Base case
        if n <= 1 then 1
        -- Recursive case  
        else n * factorial (n - 1)
   
   2. Type annotations with documentation:
      type Person = {
        name : String,    -- Person's full name
        age : Number      -- Age in years
      }
   
   3. Module system with header comments:
      {- Module: Mathematics
         Description: Basic mathematical operations
         Author: Language Development Team
      -}
      
   These comments help plan future development while keeping
   the current implementation focused and clean.
-}