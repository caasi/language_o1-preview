{-
   TEST 5: Recursive Functions and Case Expressions
   ===============================================
   
   Testing intention:
   - Test recursive function definition and calls
   - Verify case expression with boolean patterns
   - Test equality operator (==) as a function
   - Validate recursive calls with modified arguments
   - Test factorial algorithm as complex recursive computation
   
   This test ensures:
   1. Recursive functions can call themselves
   2. Case expressions work with True/False patterns
   3. Equality comparison produces correct boolean values
   4. Recursive calls receive properly computed arguments
   5. Complex mathematical algorithms can be implemented
   6. Stack management handles reasonable recursion depth
   
   Expected result: 120 (5! = 5 * 4 * 3 * 2 * 1)
-}

let factorial = \ n . case (==) n 0 of 
    True -> 1                               -- Base case: 0! = 1
    ; False -> (*) n (factorial ((-) n 1))  -- Recursive: n! = n * (n-1)!
in factorial 5 -- Compute 5 factorial
